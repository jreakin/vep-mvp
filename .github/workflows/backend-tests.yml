name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vep_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      working-directory: ./backend
      run: |
        uv pip install -e ".[dev]"

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/vep_test" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
        echo "SUPABASE_ANON_KEY=test-anon-key" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=test-service-role-key" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Run database migrations
      working-directory: ./backend
      run: |
        # Wait for PostgreSQL to be ready
        sleep 10
        # Run migrations if they exist
        if [ -d "migrations" ]; then
          for migration in migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Running migration: $migration"
              psql $DATABASE_URL -f "$migration"
            fi
          done
        fi

    - name: Run linting
      working-directory: ./backend
      run: |
        uv run ruff check .
        uv run black --check .
        uv run mypy .

    - name: Run tests
      working-directory: ./backend
      run: |
        uv run pytest --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: backend/htmlcov/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      working-directory: ./backend
      run: |
        uv pip install -e ".[dev]"

    - name: Run security scan
      working-directory: ./backend
      run: |
        uv run bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: backend/bandit-report.json