name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        else
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        fi
        
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Backend
          ```bash
          cd backend
          uv pip install -e ".[prod]"
          ```
          
          ### iOS
          Open `ios/VEP.xcodeproj` in Xcode and build for your target device.
          
          ## Full Changelog
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  build-backend:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      working-directory: ./backend
      run: |
        uv pip install -e ".[prod]"

    - name: Build package
      working-directory: ./backend
      run: |
        uv build

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-release
        path: backend/dist/

  build-ios:
    runs-on: macos-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'

    - name: Install dependencies
      working-directory: ./ios
      run: |
        xcodebuild -resolvePackageDependencies

    - name: Build and archive
      working-directory: ./ios
      run: |
        xcodebuild archive \
          -scheme VEP \
          -destination 'generic/platform=iOS' \
          -archivePath VEP.xcarchive \
          -derivedDataPath DerivedData

    - name: Export IPA
      working-directory: ./ios
      run: |
        xcodebuild -exportArchive \
          -archivePath VEP.xcarchive \
          -exportPath ./build \
          -exportOptionsPlist ExportOptions.plist

    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-release
        path: |
          ios/VEP.xcarchive
          ios/build/

  update-release-assets:
    runs-on: ubuntu-latest
    needs: [create-release, build-backend, build-ios]
    
    steps:
    - uses: actions/checkout@v4

    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-release
        path: ./backend-artifacts

    - name: Download iOS artifacts
      uses: actions/download-artifact@v3
      with:
        name: ios-release
        path: ./ios-artifacts

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./backend-artifacts/
        asset_name: backend-dist
        asset_content_type: application/zip

    - name: Upload iOS assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./ios-artifacts/
        asset_name: ios-build
        asset_content_type: application/zip