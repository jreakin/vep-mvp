name: Project Automation

on:
  issues:
    types: [opened, closed, assigned, unassigned, labeled, unlabeled]
  pull_request:
    types: [opened, closed, merged, reopened, labeled, unlabeled]
  project_card:
    types: [created, edited, moved, deleted]

permissions:
  issues: write
  pull-requests: write
  contents: write
  projects: write

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Update project card status
      uses: actions/github-script@v7
      with:
        script: |
          // Simplified project automation - just add comments for manual project board updates
          const { issue, pull_request } = context.payload;
          const item = issue || pull_request;
          
          if (!item) return;
          
          let statusMessage = '';
          let emoji = '🔄';
          
          if (context.eventName === 'issues') {
            const { action } = context.payload;
            
            if (action === 'assigned') {
              statusMessage = 'This issue has been assigned and should be moved to "In Progress" column.';
              emoji = '🚀';
            } else if (action === 'closed') {
              statusMessage = 'This issue has been closed and should be moved to "🎉 Done" column.';
              emoji = '✅';
            } else if (action === 'labeled' && context.payload.label.name === 'in-progress') {
              statusMessage = 'This issue is now in progress and should be moved to "In Progress" column.';
              emoji = '🔄';
            } else if (action === 'labeled' && context.payload.label.name === 'completed') {
              statusMessage = 'This issue is completed and should be moved to "🎉 Done" column.';
              emoji = '✅';
            }
          } else if (context.eventName === 'pull_request') {
            const { action } = context.payload;
            
            if (action === 'opened' || action === 'reopened') {
              statusMessage = 'This pull request has been opened and should be moved to "👀 Code Review" column.';
              emoji = '👀';
            } else if (action === 'merged') {
              statusMessage = 'This pull request has been merged and should be moved to "Testing" column.';
              emoji = '🧪';
            } else if (action === 'closed' && !context.payload.pull_request.merged) {
              statusMessage = 'This pull request has been closed and should be moved back to "Ready" column.';
              emoji = '↩️';
            }
          }
          
          if (statusMessage) {
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                body: `${emoji} **Project Board Update**: ${statusMessage}`
              });
              console.log(`Added project update comment to ${context.eventName} #${item.number}`);
            } catch (error) {
              console.log(`Failed to add comment: ${error.message}`);
            }
          }

  update-issue-dependencies:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    
    steps:
    - uses: actions/checkout@v4

    - name: Check for dependent issues
      uses: actions/github-script@v7
      with:
        script: |
          const { issue } = context.payload;
          
          // Check if this is an agent issue
          const agentLabels = issue.labels.filter(label => 
            label.name.startsWith('agent-')
          );
          
          if (agentLabels.length === 0) return;
          
          const agentNumber = agentLabels[0].name.split('-')[1];
          
          // Find issues that depend on this agent
          try {
            const dependentIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'blocked'
            });
            
            for (const dependentIssue of dependentIssues.data) {
              const body = dependentIssue.body || '';
              
              // Check if this issue is mentioned as a blocker
              if (body.includes(`#${issue.number}`) || 
                  body.includes(`Agent ${agentNumber}`) ||
                  body.includes(`Agent ${agentNumber} database schema`) ||
                  body.includes(`Agent ${agentNumber} backend API`)) {
                
                // Add a comment about the dependency being resolved
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: dependentIssue.number,
                    body: `🎉 **Dependency Resolved**: Agent ${agentNumber} (Issue #${issue.number}) has been completed. This issue is now ready to start!`
                  });
                } catch (error) {
                  console.log(`Could not add comment to issue #${dependentIssue.number}: ${error.message}`);
                }
                
                console.log(`Notified issue #${dependentIssue.number} that dependency is resolved`);
              }
            }
          } catch (error) {
            console.log(`Error checking dependent issues: ${error.message}`);
          }

  create-progress-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    
    steps:
    - uses: actions/checkout@v4

    - name: Update PROGRESS.md
      uses: actions/github-script@v7
      with:
        script: |
          const { issue } = context.payload;
          
          // Check if this is an agent issue
          const agentLabels = issue.labels.filter(label => 
            label.name.startsWith('agent-')
          );
          
          if (agentLabels.length === 0) return;
          
          const agentNumber = agentLabels[0].name.split('-')[1];
          
          // Add a comment to the issue about completion
          try {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `🎉 **Agent ${agentNumber} Completed**: This agent's work has been completed and merged. Please update the PROGRESS.md file manually to reflect this completion.`
            });
            console.log(`Added completion comment to Agent ${agentNumber} issue`);
          } catch (error) {
            console.log(`Could not add completion comment: ${error.message}`);
          }