name: Project Automation

on:
  issues:
    types: [opened, closed, assigned, unassigned, labeled, unlabeled]
  pull_request:
    types: [opened, closed, merged, reopened, labeled, unlabeled]
  project_card:
    types: [created, edited, moved, deleted]

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Update project card status
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { issue, pull_request } = context.payload;
          const item = issue || pull_request;
          
          if (!item) {
            console.log('No item found in payload');
            return;
          }
          
          console.log(`Processing ${context.eventName} event for ${item.number}`);
          
          // Get organization or user projects using Projects V2 API
          const ownerType = context.payload.repository.owner.type;
          const ownerQuery = ownerType === 'Organization' 
            ? `organization(login: "${context.repo.owner}")`
            : `user(login: "${context.repo.owner}")`;
          
          const projectQuery = `
            query {
              ${ownerQuery} {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }
          `;
          
          try {
            const projectResult = await github.graphql(projectQuery);
            const projects = ownerType === 'Organization' 
              ? projectResult.organization.projectsV2.nodes
              : projectResult.user.projectsV2.nodes;
            
            console.log('Available projects:', projects.map(p => p.title));
            
            const vepProject = projects.find(p => p.title.includes('VEP MVP'));
            
            if (!vepProject) {
              console.log('VEP MVP project not found. Available projects:', projects.map(p => p.title));
              return;
            }
            
            console.log(`Found project: ${vepProject.title} (${vepProject.id})`);
            
            // Get the project fields (including Status field)
            const projectFieldsQuery = `
              query {
                node(id: "${vepProject.id}") {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const fieldsResult = await github.graphql(projectFieldsQuery);
            const fields = fieldsResult.node.fields.nodes;
            
            console.log('Available fields:', fields.map(f => f.name));
            
            const statusField = fields.find(f => f.name === 'Status');
            
            if (!statusField || !statusField.options) {
              console.log('Status field not found or has no options');
              return;
            }
            
            console.log('Status field options:', statusField.options.map(o => o.name));
            
            // Find the project item for this issue/PR
            const itemType = issue ? 'Issue' : 'PullRequest';
            const itemQuery = `
              query {
                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                  ${issue ? 'issue' : 'pullRequest'}(number: ${item.number}) {
                    id
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const itemResult = await github.graphql(itemQuery);
            const node = issue ? itemResult.repository.issue : itemResult.repository.pullRequest;
            const projectItems = node.projectItems.nodes;
            
            console.log(`Found ${projectItems.length} project items for ${itemType} #${item.number}`);
            
            const vepProjectItem = projectItems.find(item => item.project.id === vepProject.id);
            
            if (!vepProjectItem) {
              console.log(`Project item not found for ${itemType} #${item.number} in project ${vepProject.title}`);
              return;
            }
            
            console.log(`Found project item: ${vepProjectItem.id}`);
            
            // Determine which status to move to based on event
            let targetStatusName = null;
            
            if (context.eventName === 'issues') {
              const { action } = context.payload;
              
              if (action === 'assigned') {
                targetStatusName = 'In Progress';
              } else if (action === 'closed') {
                targetStatusName = 'Done';
              } else if (action === 'labeled' && context.payload.label.name === 'in-progress') {
                targetStatusName = 'In Progress';
              } else if (action === 'labeled' && context.payload.label.name === 'completed') {
                targetStatusName = 'Done';
              }
            } else if (context.eventName === 'pull_request') {
              const { action, pull_request } = context.payload;
              
              if (action === 'opened' || action === 'reopened') {
                targetStatusName = 'Code Review';
              } else if (action === 'closed' && context.payload.pull_request.merged) {
                targetStatusName = 'Testing';
              } else if (action === 'closed' && !context.payload.pull_request.merged) {
                targetStatusName = 'Ready';
              }
            }
            
            if (!targetStatusName) {
              console.log('No status change needed for this event');
              return;
            }
            
            console.log(`Target status: ${targetStatusName}`);
            
            // Find the status option ID
            const targetOption = statusField.options.find(o => 
              o.name === targetStatusName || 
              o.name === `ðŸŸ  ${targetStatusName}` ||
              o.name === `ðŸŸ¡ ${targetStatusName}` ||
              o.name === `ðŸ‘€ ${targetStatusName}` ||
              o.name === `âœ… ${targetStatusName}` ||
              o.name === `ðŸŽ‰ ${targetStatusName}`
            );
            
            if (!targetOption) {
              console.log(`Status option '${targetStatusName}' not found. Available options:`, statusField.options.map(o => o.name));
              return;
            }
            
            console.log(`Found status option: ${targetOption.name} (${targetOption.id})`);
            
            // Update the project item status
            const updateMutation = `
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${vepProject.id}"
                  itemId: "${vepProjectItem.id}"
                  fieldId: "${statusField.id}"
                  value: {
                    singleSelectOptionId: "${targetOption.id}"
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            await github.graphql(updateMutation);
            console.log(`Successfully updated project item status to: ${targetOption.name}`);
            
          } catch (error) {
            console.log(`Error: ${error.message}`);
            if (error.errors) {
              console.log('GraphQL errors:', JSON.stringify(error.errors, null, 2));
            }
          }

  update-issue-dependencies:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    
    steps:
    - uses: actions/checkout@v4

    - name: Check for dependent issues
      uses: actions/github-script@v7
      with:
        script: |
          const { issue } = context.payload;
          
          // Check if this is an agent issue
          const agentLabels = issue.labels.filter(label => 
            label.name.startsWith('agent-')
          );
          
          if (agentLabels.length === 0) return;
          
          const agentNumber = agentLabels[0].name.split('-')[1];
          
          // Find issues that depend on this agent
          const dependentIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'blocked'
          });
          
          for (const dependentIssue of dependentIssues.data) {
            const body = dependentIssue.body || '';
            
            // Check if this issue is mentioned as a blocker
            if (body.includes(`#${issue.number}`) || 
                body.includes(`Agent ${agentNumber}`) ||
                body.includes(`Agent ${agentNumber} database schema`) ||
                body.includes(`Agent ${agentNumber} backend API`)) {
              
              // Remove blocked label and add ready label
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dependentIssue.number,
                name: 'blocked'
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dependentIssue.number,
                labels: ['ready']
              });
              
              // Update issue body to reflect unblocked status
              const updatedBody = body
                .replace(/Status: Blocked.*/g, 'Status: Ready to start')
                .replace(/Blocker: .*/g, 'Blocker: None');
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dependentIssue.number,
                body: updatedBody
              });
              
              console.log(`Unblocked issue #${dependentIssue.number}`);
            }
          }

  create-progress-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    
    steps:
    - uses: actions/checkout@v4

    - name: Update PROGRESS.md
      uses: actions/github-script@v7
      with:
        script: |
          const { issue } = context.payload;
          
          // Check if this is an agent issue
          const agentLabels = issue.labels.filter(label => 
            label.name.startsWith('agent-')
          );
          
          if (agentLabels.length === 0) return;
          
          const agentNumber = agentLabels[0].name.split('-')[1];
          
          // Read current PROGRESS.md
          const progressFile = await github.rest.repos.getContent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: 'PROGRESS.md'
          });
          
          let content = Buffer.from(progressFile.data.content, 'base64').toString();
          
          // Update the specific agent's status
          const agentSection = `## Agent ${agentNumber}`;
          const agentIndex = content.indexOf(agentSection);
          
          if (agentIndex !== -1) {
            // Find the end of this agent's section
            const nextAgentIndex = content.indexOf('## Agent', agentIndex + 1);
            const endIndex = nextAgentIndex === -1 ? content.length : nextAgentIndex;
            
            const agentContent = content.substring(agentIndex, endIndex);
            const updatedAgentContent = agentContent.replace(
              /Status: .*/g,
              `Status: âœ… **COMPLETED** - ${new Date().toISOString().split('T')[0]}`
            );
            
            content = content.substring(0, agentIndex) + updatedAgentContent + content.substring(endIndex);
            
            // Update the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'PROGRESS.md',
              message: `feat: Mark Agent ${agentNumber} as completed`,
              content: Buffer.from(content).toString('base64'),
              sha: progressFile.data.sha
            });
            
            console.log(`Updated PROGRESS.md for Agent ${agentNumber}`);
          }