name: Project Automation

on:
  issues:
    types: [opened, closed, assigned, unassigned, labeled, unlabeled]
  pull_request:
    types: [opened, closed, merged, reopened, labeled, unlabeled]
  project_card:
    types: [created, edited, moved, deleted]

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Update project card status
      uses: actions/github-script@v7
      with:
        script: |
          const { issue, pull_request } = context.payload;
          const item = issue || pull_request;
          
          if (!item) return;
          
          // Get project information
          const projectQuery = `
            query {
              repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                projects(first: 10) {
                  nodes {
                    id
                    name
                    columns(first: 10) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          `;
          
          const projectResult = await github.graphql(projectQuery);
          const projects = projectResult.repository.projects.nodes;
          const vepProject = projects.find(p => p.name.includes('VEP MVP'));
          
          if (!vepProject) {
            console.log('VEP MVP project not found');
            return;
          }
          
          // Get project columns
          const columns = vepProject.columns.nodes;
          const readyColumn = columns.find(c => c.name.includes('Ready'));
          const inProgressColumn = columns.find(c => c.name.includes('In Progress'));
          const codeReviewColumn = columns.find(c => c.name.includes('Code Review'));
          const testingColumn = columns.find(c => c.name.includes('Testing'));
          const doneColumn = columns.find(c => c.name.includes('Done'));
          
          // Find the project card for this issue/PR
          const cardQuery = `
            query {
              repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                issue(number: ${item.number}) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        id
                      }
                    }
                  }
                }
              }
            }
          `;
          
          const cardResult = await github.graphql(cardQuery);
          const projectItems = cardResult.repository.issue.projectItems.nodes;
          const vepProjectItem = projectItems.find(item => item.project.id === vepProject.id);
          
          if (!vepProjectItem) {
            console.log('Project card not found for this issue');
            return;
          }
          
          // Determine which column to move to based on event
          let targetColumn = null;
          
          if (context.eventName === 'issues') {
            const { action, issue } = context.payload;
            
            if (action === 'assigned') {
              targetColumn = inProgressColumn;
            } else if (action === 'closed') {
              targetColumn = doneColumn;
            } else if (action === 'labeled' && context.payload.label.name === 'in-progress') {
              targetColumn = inProgressColumn;
            } else if (action === 'labeled' && context.payload.label.name === 'completed') {
              targetColumn = doneColumn;
            }
          } else if (context.eventName === 'pull_request') {
            const { action, pull_request } = context.payload;
            
            if (action === 'opened' || action === 'reopened') {
              targetColumn = codeReviewColumn;
            } else if (action === 'merged') {
              targetColumn = testingColumn;
            } else if (action === 'closed' && !pull_request.merged) {
              targetColumn = readyColumn;
            }
          }
          
          if (targetColumn) {
            // Move the project card
            const moveCardMutation = `
              mutation {
                moveProjectCard(input: {
                  cardId: "${vepProjectItem.id}",
                  columnId: "${targetColumn.id}"
                }) {
                  clientMutationId
                }
              }
            `;
            
            await github.graphql(moveCardMutation);
            console.log(`Moved project card to ${targetColumn.name}`);
          }

  update-issue-dependencies:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    
    steps:
    - uses: actions/checkout@v4

    - name: Check for dependent issues
      uses: actions/github-script@v7
      with:
        script: |
          const { issue } = context.payload;
          
          // Check if this is an agent issue
          const agentLabels = issue.labels.filter(label => 
            label.name.startsWith('agent-')
          );
          
          if (agentLabels.length === 0) return;
          
          const agentNumber = agentLabels[0].name.split('-')[1];
          
          // Find issues that depend on this agent
          const dependentIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'blocked'
          });
          
          for (const dependentIssue of dependentIssues.data) {
            const body = dependentIssue.body || '';
            
            // Check if this issue is mentioned as a blocker
            if (body.includes(`#${issue.number}`) || 
                body.includes(`Agent ${agentNumber}`) ||
                body.includes(`Agent ${agentNumber} database schema`) ||
                body.includes(`Agent ${agentNumber} backend API`)) {
              
              // Remove blocked label and add ready label
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dependentIssue.number,
                name: 'blocked'
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dependentIssue.number,
                labels: ['ready']
              });
              
              // Update issue body to reflect unblocked status
              const updatedBody = body
                .replace(/Status: Blocked.*/g, 'Status: Ready to start')
                .replace(/Blocker: .*/g, 'Blocker: None');
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dependentIssue.number,
                body: updatedBody
              });
              
              console.log(`Unblocked issue #${dependentIssue.number}`);
            }
          }

  create-progress-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    
    steps:
    - uses: actions/checkout@v4

    - name: Update PROGRESS.md
      uses: actions/github-script@v7
      with:
        script: |
          const { issue } = context.payload;
          
          // Check if this is an agent issue
          const agentLabels = issue.labels.filter(label => 
            label.name.startsWith('agent-')
          );
          
          if (agentLabels.length === 0) return;
          
          const agentNumber = agentLabels[0].name.split('-')[1];
          
          // Read current PROGRESS.md
          const progressFile = await github.rest.repos.getContent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: 'PROGRESS.md'
          });
          
          let content = Buffer.from(progressFile.data.content, 'base64').toString();
          
          // Update the specific agent's status
          const agentSection = `## Agent ${agentNumber}`;
          const agentIndex = content.indexOf(agentSection);
          
          if (agentIndex !== -1) {
            // Find the end of this agent's section
            const nextAgentIndex = content.indexOf('## Agent', agentIndex + 1);
            const endIndex = nextAgentIndex === -1 ? content.length : nextAgentIndex;
            
            const agentContent = content.substring(agentIndex, endIndex);
            const updatedAgentContent = agentContent.replace(
              /Status: .*/g,
              `Status: âœ… **COMPLETED** - ${new Date().toISOString().split('T')[0]}`
            );
            
            content = content.substring(0, agentIndex) + updatedAgentContent + content.substring(endIndex);
            
            // Update the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'PROGRESS.md',
              message: `feat: Mark Agent ${agentNumber} as completed`,
              content: Buffer.from(content).toString('base64'),
              sha: progressFile.data.sha
            });
            
            console.log(`Updated PROGRESS.md for Agent ${agentNumber}`);
          }