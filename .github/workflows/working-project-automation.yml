name: Working Project Automation

on:
  issues:
    types: [opened, closed, assigned, labeled]
  pull_request:
    types: [opened, closed, merged]
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: write
  projects: write
  contents: read

jobs:
  automate-project:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update project status
      uses: actions/github-script@v7
      with:
        script: |
          const { issue, pull_request } = context.payload;
          const item = issue || pull_request;
          
          if (!item) {
            console.log('No item found in payload');
            return;
          }
          
          console.log(`Processing ${context.eventName} event for ${item.number}`);
          
          // Get project information
          const projectQuery = `
            query {
              user(login: "jreakin") {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }
          `;
          
          try {
            const projectResult = await github.graphql(projectQuery);
            const projects = projectResult.user.projectsV2.nodes;
            
            console.log('Available projects:', projects.map(p => p.title));
            
            // Find VEP MVP project
            const vepProject = projects.find(p => 
              p.title.toLowerCase().includes('vep') || 
              p.title.toLowerCase().includes('mvp')
            );
            
            if (!vepProject) {
              console.log('VEP MVP project not found');
              return;
            }
            
            console.log(`Found project: ${vepProject.title} (${vepProject.id})`);
            
            // Get project fields
            const projectFieldsQuery = `
              query {
                node(id: "${vepProject.id}") {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const fieldsResult = await github.graphql(projectFieldsQuery);
            const fields = fieldsResult.node.fields.nodes;
            
            const statusField = fields.find(f => f.name === 'Status');
            
            if (!statusField || !statusField.options) {
              console.log('Status field not found');
              return;
            }
            
            // Find the project item
            const itemType = issue ? 'Issue' : 'PullRequest';
            const itemQuery = `
              query {
                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                  ${issue ? 'issue' : 'pullRequest'}(number: ${item.number}) {
                    id
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const itemResult = await github.graphql(itemQuery);
            const node = issue ? itemResult.repository.issue : itemResult.repository.pullRequest;
            const projectItems = node.projectItems.nodes;
            
            const vepProjectItem = projectItems.find(item => item.project.id === vepProject.id);
            
            if (!vepProjectItem) {
              console.log(`Project item not found for ${itemType} #${item.number}`);
              return;
            }
            
            // Determine target status
            let targetStatusName = null;
            
            if (context.eventName === 'issues') {
              const { action } = context.payload;
              
              if (action === 'assigned') {
                targetStatusName = 'In Progress';
              } else if (action === 'closed') {
                targetStatusName = 'Done';
              } else if (action === 'labeled' && context.payload.label.name === 'in-progress') {
                targetStatusName = 'In Progress';
              } else if (action === 'labeled' && context.payload.label.name === 'completed') {
                targetStatusName = 'Done';
              }
            } else if (context.eventName === 'pull_request') {
              const { action, pull_request } = context.payload;
              
              if (action === 'opened' || action === 'reopened') {
                targetStatusName = 'Code Review';
              } else if (action === 'closed' && context.payload.pull_request.merged) {
                targetStatusName = 'Testing';
              } else if (action === 'closed' && !context.payload.pull_request.merged) {
                targetStatusName = 'Ready';
              }
            }
            
            if (!targetStatusName) {
              console.log('No status change needed for this event');
              return;
            }
            
            // Find the status option
            const targetOption = statusField.options.find(o =>
              o.name === targetStatusName ||
              o.name === `🟠 ${targetStatusName}` ||
              o.name === `🟡 ${targetStatusName}` ||
              o.name === `👀 ${targetStatusName}` ||
              o.name === `✅ ${targetStatusName}` ||
              o.name === `🎉 ${targetStatusName}` ||
              o.name === `🚀 ${targetStatusName}` ||
              o.name === `🧪 ${targetStatusName}` ||
              o.name === `↩️ ${targetStatusName}`
            );
            
            if (!targetOption) {
              console.log(`Status option '${targetStatusName}' not found`);
              return;
            }
            
            // Update the project item status
            const updateMutation = `
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${vepProject.id}"
                  itemId: "${vepProjectItem.id}"
                  fieldId: "${statusField.id}"
                  value: {
                    singleSelectOptionId: "${targetOption.id}"
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            await github.graphql(updateMutation);
            console.log(`Successfully updated project item status to: ${targetOption.name}`);
            
            // Add confirmation comment
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                body: `🎯 **Project Board Updated**: Moved to "${targetOption.name}" column automatically.`
              });
            } catch (error) {
              console.log(`Could not add confirmation comment: ${error.message}`);
            }
            
          } catch (error) {
            console.log(`Error: ${error.message}`);
            if (error.errors) {
              console.log('GraphQL errors:', JSON.stringify(error.errors, null, 2));
            }
          }